# Docker Compose configuration for S&P 500 ML Pipeline
# Version: 1.0
# Usage: docker-compose up [service-name]

version: '3.8'

services:
  # ============================================================================
  # Development Environment (Interactive Shell + All Tools)
  # ============================================================================
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: sp500-dev
    image: sp500-pipeline:dev
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
      - ./outputs:/app/outputs
      - ./scripts:/app/scripts
      - ./.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
      - OANDA_TOKEN=${OANDA_TOKEN}
      - OANDA_ACCOUNT_ID=${OANDA_ACCOUNT_ID}
      - NEWSAPI_KEY=${NEWSAPI_KEY:-}
      - ALPHAVANTAGE_KEY=${ALPHAVANTAGE_KEY:-}
      - FINNHUB_KEY=${FINNHUB_KEY:-}
    networks:
      - sp500-network
    stdin_open: true
    tty: true
    command: /bin/bash

  # ============================================================================
  # Jupyter Lab (Interactive Analysis & Exploration)
  # ============================================================================
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: jupyter
    container_name: sp500-jupyter
    image: sp500-pipeline:jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
      - ./outputs:/app/outputs
      - ./notebooks:/app/notebooks
      - ./.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
      - JUPYTER_ENABLE_LAB=yes
      - OANDA_TOKEN=${OANDA_TOKEN}
      - OANDA_ACCOUNT_ID=${OANDA_ACCOUNT_ID}
    networks:
      - sp500-network
    restart: unless-stopped

  # ============================================================================
  # GPU-Enabled Trainer (for Deep Learning Models)
  # ============================================================================
  gpu-trainer:
    build:
      context: .
      dockerfile: docker/Dockerfile
    runtime: nvidia  # Use NVIDIA runtime
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./models:/app/models
      - ./outputs:/app/outputs
      - ./notebooks:/app/notebooks
      - ./scripts:/app/scripts
      - ./.env:/app/.env
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - sp500-network
    ports:
      - "8888:8888"  # Jupyter Lab
    # Change this command:
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''

  # ============================================================================
  # Data Pipeline Runner (Bronze → Silver → Gold)
  # ============================================================================
  pipeline:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sp500-pipeline
    image: sp500-pipeline:prod
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
      - ./.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
      - OANDA_TOKEN=${OANDA_TOKEN}
      - OANDA_ACCOUNT_ID=${OANDA_ACCOUNT_ID}
    networks:
      - sp500-network
    command: python run_sp500_pipeline.py --skip-labels

  # ============================================================================
  # Data Downloader (S&P 500 Historical Data)
  # ============================================================================
  downloader:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sp500-downloader
    image: sp500-pipeline:prod
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
      - OANDA_TOKEN=${OANDA_TOKEN}
      - OANDA_ACCOUNT_ID=${OANDA_ACCOUNT_ID}
    networks:
      - sp500-network
    command: python src/download_sp500_historical.py --years 5 --granularity M1

  # ============================================================================
  # News Scraper (RSS Feeds - No API Keys Required)
  # ============================================================================
  news-scraper:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sp500-news-scraper
    image: sp500-pipeline:prod
    volumes:
      - ./data:/app/data
      - ./.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
      - NEWSAPI_KEY=${NEWSAPI_KEY:-}
      - ALPHAVANTAGE_KEY=${ALPHAVANTAGE_KEY:-}
      - FINNHUB_KEY=${FINNHUB_KEY:-}
    networks:
      - sp500-network
    command: python src/scrape_sp500_news_free.py

  # ============================================================================
  # News Processor (Bronze → Silver → Gold)
  # ============================================================================
  news-processor:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sp500-news-processor
    image: sp500-pipeline:prod
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
      - ./.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - sp500-network
    command: >
      sh -c "python src/build_news_features.py &&
             python src/build_news_gold.py"

  # ============================================================================
  # Model Training Service
  # ============================================================================
  trainer:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sp500-trainer
    image: sp500-pipeline:prod
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./outputs:/app/outputs
      - ./.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - sp500-network
    command: python src/train_combined_model.py

  # ============================================================================
  # API Server (Model Serving) - Future Use
  # ============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: api
    container_name: sp500-api
    image: sp500-pipeline:api
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models
      - ./.env:/app/.env
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - sp500-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # Streamlit Dashboard (Visualization & Monitoring)
  # ============================================================================
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: streamlit
    container_name: sp500-dashboard
    image: sp500-pipeline:streamlit
    ports:
      - "8501:8501"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./outputs:/app/outputs
      - ./.env:/app/.env
      - ./src/ui_streamlit.py:/app/ui_streamlit.py
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - sp500-network
    restart: unless-stopped
    command: streamlit run src/ui_streamlit.py --server.port 8501 --server.address 0.0.0.0

  # ============================================================================
  # Redis (Feature Store - Online Serving)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: sp500-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - sp500-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # ============================================================================
  # PostgreSQL (Metadata & Training History)
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: sp500-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sp500_ml
      - POSTGRES_USER=${POSTGRES_USER:-mluser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mlpassword}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sp500-network
    restart: unless-stopped

# ============================================================================
# Networks
# ============================================================================
networks:
  sp500-network:
    driver: bridge

# ============================================================================
# Volumes (Persistent Storage)
# ============================================================================
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
